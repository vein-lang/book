(self.webpackChunkdocs_vein_lang=self.webpackChunkdocs_vein_lang||[]).push([[671],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),s=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(u.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,u=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=s(n),d=r,g=m["".concat(u,".").concat(d)]||m[d]||c[d]||i;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var s=2;s<i;s++)l[s]=n[s];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9881:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return u},metadata:function(){return s},toc:function(){return p},default:function(){return m}});var a=n(2122),r=n(9756),i=(n(7294),n(3905)),l=["components"],o={sidebar_label:"Introduction",sidebar_position:1},u='<p align="center">',s={unversionedId:"intro",id:"intro",isDocsHomePage:!1,title:'<p align="center">',description:"\u26a1\ufe0f\ud83d\udd2e Vein Lang \ud83d\udd2e\u26a1\ufe0f",source:"@site/docs/intro.md",sourceDirName:".",slug:"/intro",permalink:"/docs/intro",editUrl:"https://github.com/0xF6/docs.vein-lang/edit/master/docs/intro.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_label:"Introduction",sidebar_position:1},sidebar:"tutorialSidebar",next:{title:"Architecture ELF",permalink:"/docs/ishtar/structure_elf"}},p=[{value:"OS Support",id:"os-support",children:[]},{value:"Compiling from source",id:"compiling-from-source",children:[{value:"Building on Windows",id:"building-on-windows",children:[]},{value:"Building on Linux (on ubuntu)",id:"building-on-linux-on-ubuntu",children:[]}]},{value:"Contributing",id:"contributing",children:[]},{value:"QA",id:"qa",children:[]},{value:"Special Thanks",id:"special-thanks",children:[]},{value:"License",id:"license",children:[]},{value:"Support",id:"support",children:[]}],c={toc:p};function m(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:""}),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"#"},(0,i.kt)("img",{height:"128",wight:"128",src:"https://user-images.githubusercontent.com/13326808/119747309-2252eb80-be9b-11eb-8bcc-2613658162a7.png"}))),(0,i.kt)("h1",{align:"center"},"\u26a1\ufe0f\ud83d\udd2e Vein Lang \ud83d\udd2e\u26a1\ufe0f"),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"https://www.codacy.com/gh/0xF6/mana_lang/dashboard?utm_source=github.com&utm_medium=referral&utm_content=0xF6/mana_lang&utm_campaign=Badge_Grade"},(0,i.kt)("img",{src:"https://app.codacy.com/project/badge/Grade/9dc3cb6f384747c39d0b83241e725de2"})),(0,i.kt)("a",{href:"https://www.codacy.com/gh/0xF6/mana_lang/dashboard?utm_source=github.com&utm_medium=referral&utm_content=0xF6/mana_lang&utm_campaign=Badge_Coverage"},(0,i.kt)("img",{src:"https://app.codacy.com/project/badge/Coverage/9dc3cb6f384747c39d0b83241e725de2"})),(0,i.kt)("a",{href:"#"},(0,i.kt)("img",{src:"http://img.shields.io/:license-MIT-blue.svg"})),(0,i.kt)("a",{href:"https://app.fossa.com/projects/git%2Bgithub.com%2F0xF6%2Fwave_lang?ref=badge_shield",alt:"FOSSA Status"},(0,i.kt)("img",{src:"https://app.fossa.com/api/projects/git%2Bgithub.com%2F0xF6%2Fwave_lang.svg?type=shield"})),(0,i.kt)("a",{href:"https://github.com/0xF6/wave_lang/releases"},(0,i.kt)("img",{src:"https://img.shields.io/github/release/0xF6/mana_lang.svg?logo=github&style=flat"}))),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"https://t.me/ivysola"},(0,i.kt)("img",{src:"https://img.shields.io/badge/Ask%20Me-Anything-1f425f.svg?style=popout-square&logo=telegram"}))),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"#"},(0,i.kt)("img",{src:"https://forthebadge.com/images/badges/0-percent-optimized.svg"}),(0,i.kt)("img",{src:"https://forthebadge.com/images/badges/ctrl-c-ctrl-v.svg"}),(0,i.kt)("img",{src:"https://forthebadge.com/images/badges/kinda-sfw.svg"}),(0,i.kt)("img",{src:"https://forthebadge.com/images/badges/powered-by-black-magic.svg"}))),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"#"},(0,i.kt)("img",{src:"https://forthebadge.com/images/badges/works-on-my-machine.svg"}))),(0,i.kt)("hr",null),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Vein is an open source high-level strictly-typed programming language with a standalone OS, arm and quantum computing support.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"os-support"},"OS Support"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"OS"),(0,i.kt)("th",{parentName:"tr",align:null},"Version"),(0,i.kt)("th",{parentName:"tr",align:null},"Architectures"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Windows 10"),(0,i.kt)("td",{parentName:"tr",align:null},"1607+"),(0,i.kt)("td",{parentName:"tr",align:null},"x64, ARM64")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"OSX"),(0,i.kt)("td",{parentName:"tr",align:null},"10.14+"),(0,i.kt)("td",{parentName:"tr",align:null},"x64")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"Linux"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"x64, ARM64")))),(0,i.kt)("h2",{id:"compiling-from-source"},"Compiling from source"),(0,i.kt)("h3",{id:"building-on-windows"},"Building on Windows"),(0,i.kt)("p",null,"For building, you need the following tools:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dotnet 6.0"),(0,i.kt)("li",{parentName:"ul"},"Win10 SDK"),(0,i.kt)("li",{parentName:"ul"},"vsbuild-tools-2019 with MSVC 2019, MSVC142 for ARM64")),(0,i.kt)("p",null,"Checkout vein sources"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git://github.com/0xf6/mana_lang.git --recurse-submodules\ncd vein lang\ngit fetch --prune --unshallow --tags\n\ndotnet restore\n")),(0,i.kt)("h4",{id:"compile-ishtarvm"},"Compile IshtarVM"),(0,i.kt)("p",null,"Go to ishtar folder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-base"},"cd .\\backend\\vein.backend.ishtar.light\n")),(0,i.kt)("p",null,"Compile for Windows 10 x64"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet publish -r win10-x64 -c Release\n")),(0,i.kt)("p",null,"Compile for Windows 10 ARM64"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dotnet publish -r win-arm64 -c Release\n")),(0,i.kt)("p",null,"Copy output files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir output\ncp -R ./backend/vein.backend.ishtar.light/bin/net6.0/win10-x64/native/ ./output\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," folder should contain:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ishtar.exe - main ishtar file"),(0,i.kt)("li",{parentName:"ul"},"ishtar.exp - export metadata for main module"),(0,i.kt)("li",{parentName:"ul"},"ishtar.lib - dynamic library for main module"),(0,i.kt)("li",{parentName:"ul"},"ishtar.pdb - debug symbols")),(0,i.kt)("h4",{id:"compile-manac"},"Compile manac"),(0,i.kt)("p",null,"Go to vein compiler folder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-base"},"cd .\\compiler\n")),(0,i.kt)("p",null,"Compile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dotnet publish -r win-x64 -c Release\n")),(0,i.kt)("p",null,"Copy the output files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir output\ncp -R ./bin/Release/net6.0/win-x64/publish ./output\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," folder should contain:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"manac.exe - main executable compiler file")),(0,i.kt)("h3",{id:"building-on-linux-on-ubuntu"},"Building on Linux (on ubuntu)"),(0,i.kt)("p",null,"For building, you need the following tools:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"dotnet 6.0"),(0,i.kt)("li",{parentName:"ul"},"clang"),(0,i.kt)("li",{parentName:"ul"},"zlib1g-dev"),(0,i.kt)("li",{parentName:"ul"},"libkrb5-dev"),(0,i.kt)("li",{parentName:"ul"},"libssl-dev")),(0,i.kt)("p",null,"Checkout vein sources"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"git clone git://github.com/0xf6/mana_lang.git --recurse-submodules\ncd vein lang\ngit fetch --prune --unshallow --tags\n\ndotnet restore\n")),(0,i.kt)("h4",{id:"compile-ishtarvm-1"},"Compile IshtarVM"),(0,i.kt)("p",null,"Go to ishtar folder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-base"},"cd .\\backend\\vein.backend.ishtar.light\n")),(0,i.kt)("p",null,"Compile for Linux x64"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"dotnet publish -r linux-x64 -c Release\n")),(0,i.kt)("p",null,"Compile for Linux ARM64"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dotnet publish -r linux-arm64 -c Release\n")),(0,i.kt)("p",null,"Copy output files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir output\ncp -R ./backend/vein.backend.ishtar.light/bin/Release/net6.0/linux-x64/native ./output\n")),(0,i.kt)("h4",{id:"compile-manac-1"},"Compile manac"),(0,i.kt)("p",null,"Go to vein compiler folder"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-base"},"cd .\\compiler\n")),(0,i.kt)("p",null,"Compile"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"dotnet publish -r linux-x64 -c Release\n")),(0,i.kt)("p",null,"Copy output files"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir output\ncp -R ./bin/Release/net6.0/linux-x64/publish ./output\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"output")," folder should contain:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"manac - main executable compiler file")),(0,i.kt)("h2",{id:"contributing"},"Contributing"),(0,i.kt)("p",null,"We welcome everyone to contribute to vein language.\nTo do so, you need to know a couple of things about the folder structure::"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"/backend: folder contains all backend vm\\generator for vein\n  /clr: variant generator for CLR VM\n  /hashlink: variant generator for Hashlink VM\n  /LLVM: variabnt generator for LLVM toolstack\n  /ishtar.generator: variant generator for IshtarVM\n  /ishtar.light: implementation of ishtar vm in C#\n/compiler: folder contains source for vein compiler\n/ide_ext: visual code extension sources\n/lib: folder with common libraries\n  /ast: vein AST library, for parsing\n  /projectsystem: project system models, for compiler\n/lsp: language server for vein lang\n/vein.std: standard library sources\n/samples: Wow! its samples!\n/test: folder with various tests\n")),(0,i.kt)("p",null,"You can run all tests from the root directory with ",(0,i.kt)("inlineCode",{parentName:"p"},"dotnet test"),"."),(0,i.kt)("p",null,"To recompile the vm and the compiler: ",(0,i.kt)("inlineCode",{parentName:"p"},"dotnet build"),"."),(0,i.kt)("p",null,"To recompile the standard library: ",(0,i.kt)("inlineCode",{parentName:"p"},"manac ./vein.std/corlib.wproj"),"."),(0,i.kt)("p",null,"After your changes are done, please remember to run ",(0,i.kt)("inlineCode",{parentName:"p"},"dotnet format")," to guarantee all files are properly formatted and\nthen run the full suite with ",(0,i.kt)("inlineCode",{parentName:"p"},"dotnet test"),"."),(0,i.kt)("h2",{id:"qa"},"Q\\A"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"Q:\n  Why is it called vein?\nA:\n  I liked it very much \ud83d\uddff\ud83d\uddff\ud83d\uddff\n  So, I tried to choose a memorable name that would be easy\n  simple for the tools (like the 'rune' package manager).\n  The original name was Wave Lang, but I didn't like it, \n  and it was chosen at random \ud83d\ude42.\n\nQ:\n  Why it based on C#?\nA:\n  Initially, i started developing a virtual machine in C++,\n  but there were a lot of difficulties with basic things (such as collections, text formatting, etc.)\n  And at some point i saw that microsoft began to develop a fully AOT compiler for dotnet.\n  That means we could write in pure C# without using runtime and std, \n  which allows everyone to write such hard things like an OS!\n  So I decided - that's it! I'm Definitely writing a virtual machine in C#!\n\n  So, now I'm developing using the C# runtime and the std, but \n  in version 2.0 I'm planning to completely move away from runtime dependencies.\n\nQ:\n  This language really support quantum computing?\nA:\n  Not now, but in future I'm planning to add support for Microsoft Quantum Simulator, \n  next - support for Azure Qunatum or IBM quantum cloud.\n  And after the release of stationary quantum extension card (like PCEx128 \ud83d\ude03), \n  I'll add support for them too.\n\n\n")),(0,i.kt)("h2",{id:"special-thanks"},"Special Thanks"),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"https://www.jetbrains.com/?from=mana_lang"},(0,i.kt)("img",{height:"128",wight:"128",src:"https://raw.githubusercontent.com/0xF6/mana_lang/master/.github/images/jetbrains-variant-3.png"}))),(0,i.kt)("h2",{id:"license"},"License"),(0,i.kt)("p",null,"Vein is primarily distributed under the terms of both the MIT license and the Apache License (Version 2.0),\nwith portions covered by various BSD-like licenses."),(0,i.kt)("p",null,"Check LICENSE files for more information."),(0,i.kt)("h2",{id:"support"},"Support"),(0,i.kt)("p",{align:"center"},(0,i.kt)("a",{href:"https://ko-fi.com/P5P7YFY5"},(0,i.kt)("img",{src:"https://www.ko-fi.com/img/githubbutton_sm.svg"}))))}m.isMDXComponent=!0}}]);