(self.webpackChunkdocs_vein_lang=self.webpackChunkdocs_vein_lang||[]).push([[676],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||p[f]||o;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},8685:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return u},default:function(){return d}});var r=n(2122),a=n(9756),o=(n(7294),n(3905)),i=["components"],s={},l="The Basics",c={unversionedId:"guides/the-basis",id:"guides/the-basis",isDocsHomePage:!1,title:"The Basics",description:"Vein is a new programming language for Windows, OSX, Linux app development.",source:"@site/docs/guides/the-basis.md",sourceDirName:"guides",slug:"/guides/the-basis",permalink:"/docs/guides/the-basis",editUrl:"https://github.com/0xF6/docs.vein-lang/edit/master/docs/guides/the-basis.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How to build Quantum",permalink:"/docs/guides/how-to-quantum"},next:{title:"Object",permalink:"/docs/runtime/api/Object"}},u=[],p={toc:u};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"the-basics"},"The Basics"),(0,o.kt)("p",null,"Vein is a new programming language for Windows, OSX, Linux app development."),(0,o.kt)("p",null,"Vein provides its own versions of all fundamental types, including Int32, UInt32 and other variants for integers, Double, Half and Float for floating-point values, Bool for Boolean values, and String for textual data.\nVein also provides powerful versions of the three primary collection types, Array, List, and Dictionary, as described in  ",(0,o.kt)("a",{parentName:"p",href:"./CollectionTypes"},"Collection Types"),"."),(0,o.kt)("h1",{id:"constants-and-variables"},"Constants and Variables"),(0,o.kt)("p",null,'Constants and variables associate a name (such as fooBar or clientMessage) with a value of a particular type (such as the number 10 or the string "Hello").\nThe value of a constant can\u2019t be changed once it\u2019s set, whereas a variable can be set to a different value in the future.'),(0,o.kt)("h1",{id:"declaring-constants-and-variables"},"Declaring Constants and Variables"),(0,o.kt)("p",null,"Constants and variables must be declared before they\u2019re used.\nYou declare constants with the ",(0,o.kt)("inlineCode",{parentName:"p"},"auto")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," keyword and variables with the ",(0,o.kt)("inlineCode",{parentName:"p"},"auto")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"let")," keyword.\nHere\u2019s an example of how constants and variables can be used to track the number of login attempts a user has made:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-cpp"},'auto str = "fooBar";\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-swift"},"let number: Int32 = 12;\n")))}d.isMDXComponent=!0}}]);