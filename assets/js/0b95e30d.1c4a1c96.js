(self.webpackChunkdocs_vein_lang=self.webpackChunkdocs_vein_lang||[]).push([[742],{3905:function(e,r,t){"use strict";t.d(r,{Zo:function(){return d},kt:function(){return f}});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=n.createContext({}),l=function(e){var r=n.useContext(c),t=r;return e&&(t="function"==typeof e?e(r):o(o({},r),e)),t},d=function(e){var r=l(e.components);return n.createElement(c.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},p=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,i=e.originalType,c=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),p=l(t),f=a,m=p["".concat(c,".").concat(f)]||p[f]||u[f]||i;return t?n.createElement(m,o(o({ref:r},d),{},{components:t})):n.createElement(m,o({ref:r},d))}));function f(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=p;var s={};for(var c in r)hasOwnProperty.call(r,c)&&(s[c]=r[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var l=2;l<i;l++)o[l]=t[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,t)}p.displayName="MDXCreateElement"},4887:function(e,r,t){"use strict";t.r(r),t.d(r,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return d},default:function(){return p}});var n=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],s={description:"Architecture of executable file for the Ishtar virtual machine"},c="Architecture ELF",l={unversionedId:"ishtar/structure_elf",id:"ishtar/structure_elf",isDocsHomePage:!1,title:"Architecture ELF",description:"Architecture of executable file for the Ishtar virtual machine",source:"@site/docs/ishtar/structure_elf.md",sourceDirName:"ishtar",slug:"/ishtar/structure_elf",permalink:"/docs/ishtar/structure_elf",editUrl:"https://github.com/0xF6/docs.vein-lang/edit/master/docs/ishtar/structure_elf.md",tags:[],version:"current",frontMatter:{description:"Architecture of executable file for the Ishtar virtual machine"},sidebar:"tutorialSidebar",previous:{title:"Introduction",permalink:"/docs/intro"},next:{title:"Compiler Option Flags",permalink:"/docs/compiler-option-flags"}},d=[{value:"How to read ELF of Ishtar",id:"how-to-read-elf-of-ishtar",children:[]}],u={toc:d};function p(e){var r=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"architecture-elf"},"Architecture ELF"),(0,i.kt)("h2",{id:"how-to-read-elf-of-ishtar"},"How to read ELF of Ishtar"),(0,i.kt)("p",null,"Use default ELF reader."),(0,i.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("p",{parentName:"div"}," All Ishtar IL code is contained in ",(0,i.kt)("strong",{parentName:"p"},".code")," elf section."))),(0,i.kt)("p",null,"After reading elf ",(0,i.kt)("strong",{parentName:"p"},".code")," section, following instructions to decode the IL Code"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// read module name index (size 4)\nvar name_index = read4();\n")),(0,i.kt)("p",null,"Next, reading const-string dictionary of key: int, value: string."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// read constants srting dictionary size\nvar strings_storage_size = read4();\n\n// for(i = 0; i != strings_storage_size; i++)\nvar key = read4();\nvar size = read4(); // size of string (bytes)\nvar magic = read2(); // 0x45, validate this\nvar body = readBytes(size); // body string\nvar str = utf8.toString(body);\nstorage.add(key, str);\n")),(0,i.kt)("p",null,"Next, reading classes body."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// read list size\nvar size_of_classes = read4();\n\n// for(i = 0; i != size_of_classes; i++)\nvar size_body = read4();\nvar name_index = read4();\nvar namespace_index = read4();\nvar flags = readByte(); // See ClassFlags\nvar parentIdx = read8(); // reading index of parent class, if present\n")),(0,i.kt)("p",null,"Next, read methods"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"// read list size\nvar size_of_methods = read4();\n\n// for(i = 0; i != size_of_methods; i++)\nvar bytes_size = read4();\nvar name_index = read4();\nvar flags = readByte(); // see MethodFlags\nvar body_size = read4();\nvar stack_size = readByte();\nvar locals_size = readByte();\nvar return_type_inx = read8();\n\n// read arguments \nvar size_of_method_argument = read4();\n// for(i = 0; i != size_of_method_argument; i++)\nvar name_idx = read4();\nvar type_idx = read8();\n\n// read IL body \nvar body = readBytes(body_size);\n")),(0,i.kt)("p",null,"Next, read class fields"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-csharp"},"var size_of_fields = read4();\n\n// for(i = 0; i != size_of_fields; i++)\nvar fieldNameIdx = read8();\nvar type_idx = read8();\nvar flags = readByte(); // See FieldFlags\n\n// read literal value \n// (if type code from FieldType has primitive and flags.Has(Literal))\nvar size = read4();\nvar bytes = readBytes(size);\n// marshal 'bytes' as primitive type if present\n")))}p.isMDXComponent=!0}}]);